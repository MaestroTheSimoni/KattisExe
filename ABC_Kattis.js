require('readline').createInterface({input:process.stdin,output:process.stdout}).on('line',(line)=>{(new Promise((resolve, reject)=>{resolve((()=>{global.vec=[]})())})).then(()=>{vec.push(line)==2?vec[1].split("").map((elem1)=>{console.log(elem1=='A'?Math.min(...vec[0].split(' ').map((elem)=>{return parseInt(elem)})):(elem1=='B'?((![Math.min(...vec[0].split(' ').map((elem)=>{return parseInt(elem)})), Math.max(...vec[0].split(' ').map((elem)=>{return parseInt(elem)}))].includes(vec[0].split(' ').map((elem)=>{return parseInt(elem)})[0]))?vec[0].split(' ').map((elem)=>{return parseInt(elem)})[0]:((![Math.min(...vec[0].split(' ').map((elem)=>{return parseInt(elem)})),Math.max(...vec[0].split(' ').map((elem)=>{return parseInt(elem)}))].includes(vec[0].split(' ').map((elem)=>{return parseInt(elem)})[1]))?vec[0].split(' ').map((elem)=>{return parseInt(elem)})[1]:vec[0].split(' ').map((elem)=>{return parseInt(elem)})[2])):Math.max(...vec[0].split(' ').map((elem)=>{return parseInt(elem)}))))}):''})})